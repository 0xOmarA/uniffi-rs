window.SIDEBAR_ITEMS = {"attr":[["constructor","A dummy macro that does nothing."],["export",""]],"constant":[["CALLBACK_ERROR",""],["CALLBACK_SUCCESS",""],["CALLBACK_UNEXPECTED_ERROR",""],["IDX_CALLBACK_FREE","The method index used by the Drop trait to communicate to the foreign language side that Rust has finished with it, and it can be deleted from the handle map."]],"derive":[["Enum",""],["Error",""],["Object",""],["Record",""]],"fn":[["check_compatible_version","Check whether the uniffi runtime version is compatible a given uniffi_bindgen version."],["check_remaining","A helper function to ensure we don’t read past the end of a buffer."],["checksum_metadata",""],["lower_anyhow_error_or_panic","Helper function to lower an `anyhow::Error` that’s wrapping an error type"],["rust_call","Handle a scaffolding calls"],["uniffi_foreign_executor_callback_set","Set the global ForeignExecutorCallback.  This is called by the foreign bindings, normally during initialization."],["uniffi_rustbuffer_alloc","This helper allocates a new byte buffer owned by the Rust code, and returns it to the foreign-language code as a `RustBuffer` struct. Callers must eventually free the resulting buffer, either by explicitly calling [`uniffi_rustbuffer_free`] defined below, or by passing ownership of the buffer back into Rust code."],["uniffi_rustbuffer_free","Free a byte buffer that had previously been passed to the foreign language code."],["uniffi_rustbuffer_from_bytes","This helper copies bytes owned by the foreign-language code into a new byte buffer owned by the Rust code, and returns it as a `RustBuffer` struct. Callers must eventually free the resulting buffer, either by explicitly calling the destructor defined below, or by passing ownership of the buffer back into Rust code."],["uniffi_rustbuffer_reserve","Reserve additional capacity in a byte buffer that had previously been passed to the foreign language code."]],"macro":[["assert_compatible_version","Assert that the uniffi runtime version matches an expected value."],["build_foreign_language_testcases","A macro to build testcases for a component’s generated bindings."],["ffi_converter_default_return","Macro to implement returning values by simply lowering them and returning them"],["ffi_converter_forward","Macro to implement `FfiConverter<T>` for a type by forwording all calls to another type"],["ffi_converter_rust_buffer_lift_and_lower","Macro to implement lowering/lifting using a `RustBuffer`"],["ffi_converter_trait_decl","Macro to implement `FfiConverter<T>` for a trait"],["generate_and_include_scaffolding","A helper macro to generate and include component scaffolding."],["include_scaffolding","A helper macro to include generated component scaffolding."]],"mod":[["deps",""],["ffi","Types that can cross the FFI boundary."],["metadata","Pack UniFFI interface metadata into byte arrays"]],"struct":[["ForeignBytes","Support for reading a slice of foreign-language-allocated bytes over the FFI."],["ForeignCallbackInternals","Struct to hold a foreign callback."],["ForeignExecutor","Schedule Rust calls using a foreign executor"],["ForeignExecutorHandle","Opaque handle for a foreign task executor."],["MetadataBuffer",""],["RustBuffer","Support for passing an allocated-by-Rust buffer of bytes over the FFI."],["RustCallStatus","Represents the success/error of a rust call"],["RustFuture","Future that the foreign code is awaiting"],["UnexpectedUniFFICallbackError","Used when internal/unexpected error happened when calling a foreign callback, for example when a unknown exception is raised"]],"trait":[["FfiConverter","Trait defining how to transfer values via the FFI layer."],["FfiDefault",""],["Interface","Implemented for exported interface types"]],"type":[["ForeignCallback","ForeignCallback is the Rust representation of a foreign language function. It is the basis for all callbacks interfaces. It is registered exactly once per callback interface, at library start up time. Calling this method is only done by generated objects which mirror callback interfaces objects in the foreign language."],["ForeignExecutorCallback","Callback to schedule a Rust call with a `ForeignExecutor`. The bindings code registers exactly one of these with the Rust code."],["FutureCallback","Callback that we invoke when a `RustFuture` is ready."],["Result","`Result<T, Error>`"],["RustTaskCallback","Callback for a Rust task, this is what the foreign executor invokes"]]};