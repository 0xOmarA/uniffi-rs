window.SIDEBAR_ITEMS = {"constant":[["UNIFFI_CONTRACT_VERSION",""]],"enum":[["Literal",""],["Radix",""]],"fn":[["convert_type",""],["get_or_insert_object",""]],"mod":[["attributes","Attribute definitions for a `ComponentInterface`."],["callbacks","Callback Interface definitions for a `ComponentInterface`."],["enum_","Enum definitions for a `ComponentInterface`."],["error","Error definitions for a `ComponentInterface`."],["ffi","Low-level typesystem for the FFI layer of a component interface."],["function","Function definitions for a `ComponentInterface`."],["literal","Support for literal values."],["namespace","Namespace definition for a `ComponentInterface`."],["object","Object definitions for a `ComponentInterface`."],["record","Record definitions for a `ComponentInterface`."],["types","Basic typesystem for defining a component interface."]],"struct":[["Argument","Represents an argument to a function/constructor/method call."],["CallbackInterface",""],["ComponentInterface","The main public interface for this module, representing the complete details of an interface exposed by a rust component and the details of consuming it via an extern-C FFI layer."],["Constructor",""],["Enum","Represents an enum with named variants, each of which may have named and typed fields."],["Error","Represents an Error that might be thrown by functions/methods in the component interface."],["Field",""],["Function","Represents a standalone function."],["Method",""],["Namespace","A namespace is currently just a name, but might hold more metadata about the component in future."],["Object","An “object” is an opaque type that is passed around by reference, can have methods called on it, and so on - basically your classic Object Oriented Programming type of deal, except without elaborate inheritance hierarchies. Some can be instantiated."],["Record","Represents a “data class” style object, for passing around complex values."],["RecursiveTypeIterator","Stateful iterator for yielding all types contained in a given type."],["ResultType","Combines the return and throws type of a function/method"]],"trait":[["APIBuilder","Trait to help build a `ComponentInterface` from WedIDL syntax nodes."],["APIConverter","Trait to help convert WedIDL syntax nodes into `ComponentInterface` objects."],["Callable","Implemented by function-like types (Function, Method, Constructor)"]]};